{
    "tests": [
        {
            "module": "bitstr",
            "function": "f11",
            "args": "[0]",
            "depth": "9",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==42"
            ]
        },
        {
            "module": "bitstr",
            "function": "f12",
            "args": "[0, 0, 0]",
            "depth": "14",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1==0 and $2==5 and $3==2"
            ]
        },
        {
            "module": "bitstr",
            "function": "f13",
            "args": "[0, 0, 0]",
            "depth": "24",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1==3 and $2==2 and $3==3",
                "$1==6 and $2==3 and $3==2",
                "$1==26 and $2==5 and $3==0"
            ]
        },
        {
            "module": "bitstr",
            "function": "f21",
            "args": "[<<>>]",
            "depth": "6",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1=='0b000000000101010'"
            ]
        },
        {
            "module": "bitstr",
            "function": "f22",
            "args": "[<<>>, 42]",
            "depth": "8",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1=='0b101010' and $2==6"
            ]
        },
        {
            "module": "bitstr",
            "function": "f23",
            "args": "[0, 0]",
            "depth": "7",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1==9 and $2==5"
            ]
        },
        {
            "module": "bitstr",
            "function": "f24",
            "args": "[<<>>, 0]",
            "depth": "8",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1=='0b101010' and $2==6"
            ]
        },
        {
            "module": "bitstr",
            "function": "f25",
            "args": "[<<>>, 0]",
            "depth": "8",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1=='0b101010' and $2==6"
            ]
        },
        {
            "module": "bitstr",
            "function": "f26",
            "args": "[<<>>, 0]",
            "depth": "10",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1=='0b00101010' and $2==8",
                "$1=='0b101010' and $2==6"
            ]
        },
        {
            "module": "bitstr",
            "function": "f27",
            "args": "[<<>>, 0]",
            "depth": "20",
            "errors": false,
            "arity": 2
        },
        {
            "module": "bitstr",
            "function": "f31",
            "args": "[<<>>, 0]",
            "depth": "6",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1=='0b0000' and $2==0"
            ]
        },
        {
            "module": "bitstr",
            "function": "f32",
            "args": "[<<>>, 0, 3]",
            "depth": "11",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1=='0b01000000011' and $2==0 and $3==0"
            ]
        },
        {
            "module": "bitstr",
            "function": "f33",
            "args": "[<<>>, 0, 0, <<>>]",
            "depth": "21",
            "errors": true,
            "arity": 4,
            "solutions": [
                "$1=='0b0' and $2==0 and $3==0 and $4=='0b0'"
            ]
        },
        {
            "module": "bitstr",
            "function": "f34",
            "args": "[<<>>, 0]",
            "depth": "50",
            "errors": false,
            "arity": 2
        },
        {
            "module": "bitstr",
            "function": "f35",
            "args": "[<<>>]",
            "depth": "50",
            "errors": false,
            "arity": 1
        },
        {
            "module": "bitstr",
            "function": "f36",
            "args": "[<<>>]",
            "depth": "50",
            "errors": false,
            "arity": 1
        },
        {
            "module": "bitstr",
            "function": "f37",
            "args": "[<<>>]",
            "depth": "50",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1=='0b000000000000000000000000000000000000000000'"
            ]
        },
        {
            "module": "otp_int",
            "function": "obsolete",
            "args": "[erlang, length, 1]",
            "depth": "3",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1=='ssl' and $2=='negotiated_next_protocol' and $3==1"
            ]
        },
        {
            "module": "whitelist",
            "function": "f",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-f-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==424242"
            ]
        },
        {
            "module": "whitelist",
            "function": "g",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-g-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==4242"
            ]
        },
        {
            "module": "whitelist",
            "function": "k",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-k-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==42"
            ]
        },
        {
            "module": "complex_spec",
            "function": "f",
            "args": "[[]]",
            "depth": "32",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==[([1,2],[([[1],[2]],[3.14]),2])]"
            ]
        },
        {
            "module": "collection",
            "function": "f",
            "args": "[[]]",
            "depth": "10",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==[17,17,42]"
            ]
        },
        {
            "module": "collection",
            "function": "g",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==42",
                "$1==[0]",
                "$1==[42] or $1=='*'"
            ]
        },
        {
            "module": "collection",
            "function": "g1",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==42",
                "$1==1",
                "$1==[0]"
            ]
        },
        {
            "module": "collection",
            "function": "h",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==17"
            ],
            "bifs": [
                "erlang:get/1"
            ]
        },
        {
            "module": "collection",
            "function": "f1",
            "args": "[1]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "withUtestBin": true,
            "solutions": [
                "$1==38.86"
            ]
        },
        {
            "module": "funs",
            "function": "f1",
            "args": "[fun(_) -> 1 end]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1((3,))==42 and $1((10,))==17"
            ]
        },
        {
            "module": "funs",
            "function": "f2",
            "args": "[fun(_) -> 1 end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1(($2,))==42 and $1(($3,))==17 and isinstance($2, int) and isinstance($3, int)"
            ]
        },
        {
            "module": "funs",
            "function": "f3",
            "args": "[fun(_) -> 1 end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1( ($1(($2,)),) )==42 and $1( ($1(($3,)),) )==17 and isinstance($2, int) and isinstance($3, int)"
            ]
        },
        {
            "module": "funs",
            "function": "f41",
            "args": "[fun(_) -> fun(_) -> 1 end end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "solutions": [
                "not isinstance($1(($2,)), LambdaType) and isinstance($2, int) and isinstance($3, int)",
                "$1(($2,))(($3,))==42 and isinstance($2, int) and isinstance($3, int)"
            ]
        },
        {
            "module": "funs",
            "function": "f42",
            "args": "[fun(_) -> fun(_) -> 1 end end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "solutions": [
                "not isinstance($1(($2,)), LambdaType) and isinstance($2, int) and isinstance($3, int)",
                "$1(($2,))(($3,))==42 and isinstance($2, int) and isinstance($3, int)"
            ]
        },
        {
            "module": "funs",
            "function": "f5",
            "args": "[fun(_,_,_) -> 1 end, 0, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 4,
            "solutions": [
                "$1(($2, $3, $4))==42 and $1(($4, $3, $2))==17 and isinstance($2, int) and isinstance($3, int) and isinstance($4, int)"
            ]
        },
        {
            "module": "funs",
            "function": "f6",
            "args": "[0]",
            "depth": "15",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1==42",
                "$1((42,))==42",
                "$1((42,))((42,))==42",
                "$1((42,))((42,))((42,))==42",
                "$1((42,))((42,))((42,))((42,))==42",
                "$1((42,))((42,))((42,))((42,))((42,))==42",
                "$1((42,))((42,))((42,))((42,))((42,))((42,))==42"
            ]
        },
        {
            "module": "funs",
            "function": "f7",
            "args": "[fun(_,_) -> 1 end, []]",
            "depth": "6",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1(($2[0],0))==42 and len($2)==1",
                "$1(($2[1], $1(($2[0],0))))==42 and len($2)==2"
            ]
        },
        {
            "module": "funs",
            "function": "f8",
            "args": "[fun(_) -> true end, [1]]",
            "depth": "4",
            "errors": true,
            "arity": 2,
            "solutions": [
                "len([t for t in $2 if $1((t,))]) == 0"
            ]
        },
        {
            "module": "funs",
            "function": "f91",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "4",
            "opts": "-p 1 -s 1",
            "errors": true,
            "arity": 3,
            "solutions": [
                "$1(($2,))==42 and $3==1",
                "$1(($2,$2))==42 and $3==2",
                "isinstance($1, LambdaType) and $3==2"
            ]
        },
        {
            "module": "funs",
            "function": "f92",
            "args": "[fun(_) -> 1 end, 1]",
            "depth": "4",
            "errors": true,
            "arity": 2,
            "solutions": [
                "isinstance($1, LambdaType)",
                "$1(($2,))==42",
                "$1(($2,$2))==42"
            ]
        },
        {
            "module": "funs",
            "function": "f10",
            "args": "[fun(_) -> 1 end]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1((0,))==42"
            ]
        },
        {
            "module": "funs",
            "function": "f11",
            "args": "[fun(_) -> fun(_) -> 1 end end, fun(_) -> fun(_) -> 1 end end, 1]",
            "depth": "4",
            "errors": true,
            "arity": 3,
            "solutions": [
                "not isinstance($1((0,)), LambdaType)",
                "not isinstance($2((0,)), LambdaType)",
                "not isinstance($2((0,))(($3,)), int)",
                "not isinstance($1((0,))(($3,)), int)",
                "$1((0,))(($3,)) + $2((0,))(($3,)) == 9"
            ]
        },
        {
            "module": "funs",
            "function": "f12",
            "args": "[fun(_) -> fun(_) -> 1 end end]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "solutions": [
                "not isinstance($1((0,)), LambdaType)",
                "$1((0,))((1,))==42"
            ]
        },
        {
            "module": "funs",
            "function": "f1ws",
            "args": "[fun(_) -> 1 end]",
            "depth": "10",
            "errors": false,
            "arity": 1
        },
        {
            "module": "funs",
            "function": "f2ws",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "10",
            "errors": false,
            "arity": 3
        },
        {
            "module": "funs",
            "function": "f3ws",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "10",
            "errors": false,
            "arity": 3
        },
        {
            "module": "funs",
            "function": "f5ws",
            "args": "[fun(_,_,_) -> 1 end, 0, 0, 0]",
            "depth": "2",
            "errors": false,
            "arity": 4
        },
        {
            "module": "funs",
            "function": "f1hs",
            "args": "[fun(_) -> 1 end]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1((3,))==42 and $1((10,))==17"
            ]
        },
        {
            "module": "funs",
            "function": "f13a",
            "args": "[fun(_) -> 1 end, {}]",
            "depth": "5",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$2==(4,2) and isinstance($1, LambdaType)"
            ]
        },
        {
            "module": "funs",
            "function": "f13b",
            "args": "[fun(_) -> 1 end, <<>>]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1(($2,))==1 and $2=='0b00000101'",
                "$2=='0b000101' and isinstance($1, LambdaType)"
            ]
        },
        {
            "module": "sum",
            "function": "classify",
            "args": "[[]]",
            "depth": "25",
            "withProper": true,
            "arity": 1,
            "errors": true,
            "solutions": [
                "sum($1)==4711 and len($1)==1",
                "sum($1)==4711 and len($1)==2",
                "sum($1)==4711 and len($1)==3",
                "sum($1)==4711.0 and len($1)==1"
            ]
        },
        {
            "module": "funs",
            "function": "f14",
            "args": "[fun(_) -> 1 end, []]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1(($2,))==[1, 2, 3]"
            ]
        },
        {
            "module": "collection",
            "function": "eval_nif",
            "args": "[ok]",
            "depth": "25",
            "errors": false,
            "arity": 1
        },
        {
            "module": "bitstr",
            "function": "bit_sz",
            "args": "[<<>>]",
            "depth": "15",
            "errors": true,
            "arity": 1,
            "solutions": [
                "len($1[2:])==4"
            ]
        },
        {
            "module": "bitstr",
            "function": "byte_sz",
            "args": "[<<>>]",
            "depth": "42",
            "errors": true,
            "arity": 1,
            "solutions": [
                "len($1[2:])==9"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbsl",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "($1 << $2 if $2 >= 0 else $1 >> -$2) == 42"
            ]
        },
        {
            "module": "bitstr",
            "function": "bsl_big",
            "args": "[1]",
            "depth": "100",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1<<4 > 123456789012345 and $1<<4 < 123456789012345678901234567890",
                "$1<<4 > 123456789012345678901234567890 and $1<<4 < 1234567890123456789012345678901234567890123456789012345678901234567890",
                "$1<<4 > 1234567890123456789012345678901234567890123456789012345678901234567890"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbsr",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "($1 >> $2 if $2 >= 0 else $1 << -$2) == 42"
            ]
        },
        {
            "module": "bitstr",
            "function": "bsr_big",
            "args": "[1]",
            "depth": "100",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1>>4 > 123456789012345 and $1>>4 < 123456789012345678901234567890",
                "$1>>4 > 123456789012345678901234567890 and $1>>4 < 1234567890123456789012345678901234567890123456789012345678901234567890",
                "$1>>4 > 1234567890123456789012345678901234567890123456789012345678901234567890"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbnot",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "~$1"
            ]
        },
        {
            "module": "bitstr",
            "function": "bnot_big",
            "args": "[1]",
            "depth": "50",
            "errors": true,
            "arity": 1,
            "solutions": [
                "~$1 > 123456789012345 and ~$1 < 123456789012345678901234567890",
                "~$1 > 123456789012345 and ~$1 < 1234567890123456789012345678901234567890123456789012345678901234567890",
                "~$1 > 1234567890123456789012345678901234567890123456789012345678901234567890"
            ]
        },
        {
            "module": "collection",
            "function": "trunc1",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "(math.floor($1) if $1 >= 0 else math.ceil($1)) == 2.0 and $1 - 2 > 0.5"
            ]
        },
        {
            "module": "collection",
            "function": "trunc2",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "(math.floor($1) if $1 >= 0 else math.ceil($1)) == -42.0 and $1 + 43 < 0.5"
            ]
        },
        {
            "module": "bitstr",
            "function": "fband",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 & $2 == 42"
            ]
        },
        {
            "module": "bitstr",
            "function": "fband_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 & $2 == -42"
            ]
        },
        {
            "module": "bitstr",
            "function": "fband2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 & $2 == 1267650600228229401496703205376"
            ]
        },
        {
            "module": "bitstr",
            "function": "fband2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 & $2 == -1299341865233935136534120785510400"
            ]
        },
        {
            "module": "bitstr",
            "function": "fband3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "($1 + $2) & ($1 - $2) == 1208425819634629144706176"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == 42"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == 546546546546546"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == 1321678065467065468706546708964"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == -42"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == -546546546546546"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbxor3_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 ^ $2 == -1321678065467065468706546708964"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbor",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 | $2 == 42"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbor2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 | $2 == 654654621354008904"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbor3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 | $2 == 132167806349873198573065468706546708964"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbor_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 | $2 == -3"
            ]
        },
        {
            "module": "bitstr",
            "function": "fbor2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "$1 | $2 == -2581098572349081592347598712638"
            ]
        },
        {
            "module": "collection",
            "function": "l2i",
            "args": "[[49]]",
            "depth": "70",
            "errors": true,
            "arity": 1,
            "solutions": [
                "$1=='42' or $1==[52,50]"
            ]
        },
        {
            "module": "collection",
            "function": "l2in",
            "args": "[[49]]",
            "depth": "80",
            "errors": true,
            "arity": 1,
            "whitelist": "collection-l2in-1",
            "solutions": [
                "$1=='42' or $1==[52,50]"
            ]
        },
        {
            "module": "collection",
            "function": "to_upper",
            "args": "[[]]",
            "depth": "7",
            "errors": false,
            "arity": 1
        }
    ]
}
